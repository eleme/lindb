// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stat.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ShardForNode struct {
	//    Node node = 1;
	NumOfLeader          int32    `protobuf:"varint,2,opt,name=numOfLeader,proto3" json:"numOfLeader,omitempty"`
	NumOfReplica         int32    `protobuf:"varint,3,opt,name=numOfReplica,proto3" json:"numOfReplica,omitempty"`
	NumOfLiveReplica     int32    `protobuf:"varint,4,opt,name=numOfLiveReplica,proto3" json:"numOfLiveReplica,omitempty"`
	NumOfIsrReplica      int32    `protobuf:"varint,5,opt,name=numOfIsrReplica,proto3" json:"numOfIsrReplica,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShardForNode) Reset()         { *m = ShardForNode{} }
func (m *ShardForNode) String() string { return proto.CompactTextString(m) }
func (*ShardForNode) ProtoMessage()    {}
func (*ShardForNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_01fabdc1b78bd68b, []int{0}
}
func (m *ShardForNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardForNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardForNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardForNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardForNode.Merge(m, src)
}
func (m *ShardForNode) XXX_Size() int {
	return m.Size()
}
func (m *ShardForNode) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardForNode.DiscardUnknown(m)
}

var xxx_messageInfo_ShardForNode proto.InternalMessageInfo

func (m *ShardForNode) GetNumOfLeader() int32 {
	if m != nil {
		return m.NumOfLeader
	}
	return 0
}

func (m *ShardForNode) GetNumOfReplica() int32 {
	if m != nil {
		return m.NumOfReplica
	}
	return 0
}

func (m *ShardForNode) GetNumOfLiveReplica() int32 {
	if m != nil {
		return m.NumOfLiveReplica
	}
	return 0
}

func (m *ShardForNode) GetNumOfIsrReplica() int32 {
	if m != nil {
		return m.NumOfIsrReplica
	}
	return 0
}

type DatabaseState struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NumOfLeader          int32    `protobuf:"varint,2,opt,name=numOfLeader,proto3" json:"numOfLeader,omitempty"`
	NumOfShard           int32    `protobuf:"varint,3,opt,name=numOfShard,proto3" json:"numOfShard,omitempty"`
	NumOfReplica         int32    `protobuf:"varint,4,opt,name=numOfReplica,proto3" json:"numOfReplica,omitempty"`
	NumOfLiveReplica     int32    `protobuf:"varint,5,opt,name=numOfLiveReplica,proto3" json:"numOfLiveReplica,omitempty"`
	NumOfIsrReplica      int32    `protobuf:"varint,6,opt,name=numOfIsrReplica,proto3" json:"numOfIsrReplica,omitempty"`
	Desc                 string   `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DatabaseState) Reset()         { *m = DatabaseState{} }
func (m *DatabaseState) String() string { return proto.CompactTextString(m) }
func (*DatabaseState) ProtoMessage()    {}
func (*DatabaseState) Descriptor() ([]byte, []int) {
	return fileDescriptor_01fabdc1b78bd68b, []int{1}
}
func (m *DatabaseState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DatabaseState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DatabaseState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DatabaseState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatabaseState.Merge(m, src)
}
func (m *DatabaseState) XXX_Size() int {
	return m.Size()
}
func (m *DatabaseState) XXX_DiscardUnknown() {
	xxx_messageInfo_DatabaseState.DiscardUnknown(m)
}

var xxx_messageInfo_DatabaseState proto.InternalMessageInfo

func (m *DatabaseState) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DatabaseState) GetNumOfLeader() int32 {
	if m != nil {
		return m.NumOfLeader
	}
	return 0
}

func (m *DatabaseState) GetNumOfShard() int32 {
	if m != nil {
		return m.NumOfShard
	}
	return 0
}

func (m *DatabaseState) GetNumOfReplica() int32 {
	if m != nil {
		return m.NumOfReplica
	}
	return 0
}

func (m *DatabaseState) GetNumOfLiveReplica() int32 {
	if m != nil {
		return m.NumOfLiveReplica
	}
	return 0
}

func (m *DatabaseState) GetNumOfIsrReplica() int32 {
	if m != nil {
		return m.NumOfIsrReplica
	}
	return 0
}

func (m *DatabaseState) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func init() {
	proto.RegisterType((*ShardForNode)(nil), "proto.ShardForNode")
	proto.RegisterType((*DatabaseState)(nil), "proto.DatabaseState")
}

func init() { proto.RegisterFile("stat.proto", fileDescriptor_01fabdc1b78bd68b) }

var fileDescriptor_01fabdc1b78bd68b = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x2e, 0x49, 0x2c,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xab, 0x18, 0xb9, 0x78, 0x82,
	0x33, 0x12, 0x8b, 0x52, 0xdc, 0xf2, 0x8b, 0xfc, 0xf2, 0x53, 0x52, 0x85, 0x14, 0xb8, 0xb8, 0xf3,
	0x4a, 0x73, 0xfd, 0xd3, 0x7c, 0x52, 0x13, 0x53, 0x52, 0x8b, 0x24, 0x98, 0x14, 0x18, 0x35, 0x58,
	0x83, 0x90, 0x85, 0x84, 0x94, 0xb8, 0x78, 0xc0, 0xdc, 0xa0, 0xd4, 0x82, 0x9c, 0xcc, 0xe4, 0x44,
	0x09, 0x66, 0xb0, 0x12, 0x14, 0x31, 0x21, 0x2d, 0x2e, 0x01, 0x88, 0x96, 0xcc, 0xb2, 0x54, 0x98,
	0x3a, 0x16, 0xb0, 0x3a, 0x0c, 0x71, 0x21, 0x0d, 0x2e, 0x7e, 0xb0, 0x98, 0x67, 0x71, 0x11, 0x4c,
	0x29, 0x2b, 0x58, 0x29, 0xba, 0xb0, 0xd2, 0x67, 0x46, 0x2e, 0x5e, 0x97, 0xc4, 0x92, 0xc4, 0xa4,
	0xc4, 0xe2, 0xd4, 0xe0, 0x92, 0xc4, 0x92, 0x54, 0x21, 0x21, 0x2e, 0x96, 0xbc, 0xc4, 0xdc, 0x54,
	0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x9b, 0x08, 0x1f, 0xc8, 0x71, 0x71, 0x81, 0xb9,
	0x60, 0x8f, 0x43, 0xdd, 0x8f, 0x24, 0x82, 0xe1, 0x43, 0x16, 0x22, 0x7d, 0xc8, 0x4a, 0xbc, 0x0f,
	0xd9, 0xb0, 0xfa, 0x10, 0xe4, 0x9f, 0x94, 0xd4, 0xe2, 0x64, 0x09, 0x76, 0x88, 0x7f, 0x40, 0x6c,
	0x27, 0x81, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc6,
	0x63, 0x39, 0x86, 0x24, 0x36, 0x70, 0xdc, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x97, 0x57,
	0x33, 0x51, 0xd0, 0x01, 0x00, 0x00,
}

func (m *ShardForNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardForNode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumOfLeader != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStat(dAtA, i, uint64(m.NumOfLeader))
	}
	if m.NumOfReplica != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStat(dAtA, i, uint64(m.NumOfReplica))
	}
	if m.NumOfLiveReplica != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStat(dAtA, i, uint64(m.NumOfLiveReplica))
	}
	if m.NumOfIsrReplica != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStat(dAtA, i, uint64(m.NumOfIsrReplica))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DatabaseState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatabaseState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStat(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.NumOfLeader != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStat(dAtA, i, uint64(m.NumOfLeader))
	}
	if m.NumOfShard != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStat(dAtA, i, uint64(m.NumOfShard))
	}
	if m.NumOfReplica != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStat(dAtA, i, uint64(m.NumOfReplica))
	}
	if m.NumOfLiveReplica != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStat(dAtA, i, uint64(m.NumOfLiveReplica))
	}
	if m.NumOfIsrReplica != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintStat(dAtA, i, uint64(m.NumOfIsrReplica))
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintStat(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintStat(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ShardForNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumOfLeader != 0 {
		n += 1 + sovStat(uint64(m.NumOfLeader))
	}
	if m.NumOfReplica != 0 {
		n += 1 + sovStat(uint64(m.NumOfReplica))
	}
	if m.NumOfLiveReplica != 0 {
		n += 1 + sovStat(uint64(m.NumOfLiveReplica))
	}
	if m.NumOfIsrReplica != 0 {
		n += 1 + sovStat(uint64(m.NumOfIsrReplica))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DatabaseState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStat(uint64(l))
	}
	if m.NumOfLeader != 0 {
		n += 1 + sovStat(uint64(m.NumOfLeader))
	}
	if m.NumOfShard != 0 {
		n += 1 + sovStat(uint64(m.NumOfShard))
	}
	if m.NumOfReplica != 0 {
		n += 1 + sovStat(uint64(m.NumOfReplica))
	}
	if m.NumOfLiveReplica != 0 {
		n += 1 + sovStat(uint64(m.NumOfLiveReplica))
	}
	if m.NumOfIsrReplica != 0 {
		n += 1 + sovStat(uint64(m.NumOfIsrReplica))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovStat(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStat(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStat(x uint64) (n int) {
	return sovStat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ShardForNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardForNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardForNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOfLeader", wireType)
			}
			m.NumOfLeader = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOfLeader |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOfReplica", wireType)
			}
			m.NumOfReplica = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOfReplica |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOfLiveReplica", wireType)
			}
			m.NumOfLiveReplica = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOfLiveReplica |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOfIsrReplica", wireType)
			}
			m.NumOfIsrReplica = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOfIsrReplica |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DatabaseState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DatabaseState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DatabaseState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOfLeader", wireType)
			}
			m.NumOfLeader = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOfLeader |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOfShard", wireType)
			}
			m.NumOfShard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOfShard |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOfReplica", wireType)
			}
			m.NumOfReplica = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOfReplica |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOfLiveReplica", wireType)
			}
			m.NumOfLiveReplica = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOfLiveReplica |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOfIsrReplica", wireType)
			}
			m.NumOfIsrReplica = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOfIsrReplica |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStat
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthStat
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStat
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStat(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthStat
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStat = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStat   = fmt.Errorf("proto: integer overflow")
)
