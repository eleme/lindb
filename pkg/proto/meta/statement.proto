syntax = "proto3";
package proto;

import "common.proto";
import "filter.proto";
import "stat.proto";

message Stmt {
    oneof stmt {
        ShowDatabases showDatabases = 1;
        ShowStats showStats = 2;
        ShowMetric showMetric = 3;
        ShowFieldKeys showFieldKeys = 4;
        ShowTagKeys showTagKeys = 5;
        ShowTagValues showTagValues = 6;
        ShowQueries showQueries = 7;
        KillQuery killQuery = 8;
        Query query = 9;
        ShowNode showNode = 11;
        DropDatabase dropDatabase = 13;
        ShowInfo showInfo = 14;
        ShowTagValuesInfo showTagValuesInfo = 15;
    }
}
message ResultSet {
    oneof result {
        ShowDatabasesResult showDatabases = 1;
        ShowStatsResult showStats = 2;
        ShowMetricResult showMetric = 3;
        ShowTagKeysResult showTagKeys = 4;
        ShowTagValuesResult showTagValues = 5;
        ShowFieldKeysResult showFieldKeys = 6;
        QueryResult query = 7;
        ShowNodeResult showNode = 8;
        ShowInfoResult showInfo = 9;
        ShowTagValuesInfoResult showTagValuesInfo = 10;
    }
}

message DropDatabase {
    string database = 1;
}

message ShowDatabases {
}
message ShowNode {
}
message ShowNodeResult {
    //    repeated Node node = 1;
}

message ShowDatabasesResult {
    repeated string database = 1;
}

message ShowStats {
    string module = 1;
    string component = 2;
}
message ShowStatsResult {
    //    Master master = 1;
    repeated DatabaseState databaseStates = 3;
    //    repeated ShardState shardState = 4;
    repeated ShardForNode shardForNodeState = 5;
}

message ShowMetric {
    string name = 1;
    int32 limit = 2;
}
message ShowMetricResult {
    repeated string name = 1;
}

message ShowFieldKeys {
    string measurement = 1;
    int32 limit = 2;
}
message ShowFieldKeysResult {
    string measurement = 1;
    map<string, string> fields = 2;
}

message ShowInfoResult {
    string measurement = 1;
    string node = 2;
    map<string, string> info = 3;
}

message ShowTagKeys {
    string measurement = 1;
    int32 limit = 2;
}

message ShowInfo {
    string measurement = 1;
}

message ShowTagKeysResult {
    string measurement = 1;
    repeated string tagKeys = 2;
}

message ShowTagValues {
    string measurement = 1;
    string tagKey = 2;
    string tagValue = 3;
    int32 limit = 4;
    Condition condition = 5;
}

message ShowTagValuesResult {
    string measurement = 1;
    string key = 2;
    repeated string values = 3;
}

message ShowTagValuesInfo {
    string measurement = 1;
    string tagKey = 2;
    string tagValue = 3;
}

message ShowTagValuesInfoResult {
    string measurement = 1;
    string tagKey = 2;
    string tagValue = 3;
    string node = 4;
    map<string, string> info = 5;
}

message ShowQueries {
}

message KillQuery {
    int64 queryId = 1;
    int32 serverId = 2;
}

message Query {
    string measurement = 1;
    TimeRange timeRange = 2;
    int64 interval = 3;
    repeated FieldExpr fieldExprList = 4;
    repeated ConditionAggregator conditionAggregators = 5;
    Condition condition = 6;
    OrderByExpr orderBy = 7;
    GroupByExpr groupByExpr = 8;
    int32 limit = 9;
    string intervalBy = 10;
}

message ConditionAggregator {
    Condition condition = 1;
    int32 unitId = 2;
    string field = 3;
    string downSampling = 4;
    string aggregator = 5;
}

message GroupByExpr {
    repeated string groupBy = 1;
    BoolExpr havingClause = 2;
}

message QueryResult {
    repeated bytes series = 1;
    bytes explainData = 3;
}

message FieldExpr {
    Expr expr = 1;
    string alias = 2;
}

message OrderByExpr {
    Expr expr = 1;
    bool desc = 2;
}

message BoolExpr {
    oneof boolExpr {
        BinaryExpr binary = 1;
        LogicJoinExpr logicJoinExpr = 2;
    }
}

message LogicJoinExpr {
    BoolExpr leftBoolExpr = 1;
    LogicOperator op = 2;
    BoolExpr rightBoolExpr = 3;
}

message Expr {
    oneof expr {
        CallExpr call = 1;
        ValRefExpr ref = 2;
        BinaryExpr binary = 3;
        LongExpr longVal = 4;
        DoubleExpr doubleVal = 5;
        Condition condition = 6;
    }
}

message CallExpr {
    string name = 1;
    repeated Expr args = 2;
}

message LongExpr {
    int64 value = 1;
}

message DoubleExpr {
    double value = 1;
}

message BinaryExpr {
    Expr left = 1;
    Operator op = 2;
    Expr right = 3;
}

message ValRefExpr {
    string refName = 1;
}

message Series {
    int64 baseTime = 1;
    int64 interval = 2;
    int32 start = 3;
    int32 end = 4;
    Tag group = 5;
    repeated Aggregator aggregators = 6;
    map<int32, bytes> fields = 7;
    double groupValue = 8;
}

message Aggregator {
    int32 unitId = 1;
    string fun = 2;
    string fieldType = 3;
}