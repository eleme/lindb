{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "LinDB Open API",
        "contact": {
            "name": "API Support",
            "url": "https://lindb.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "2.0"
    },
    "host": "{{.Host}}",
    "basePath": "/api/v1",
    "paths": {
        "/exec": {
            "put": {
                "description": "execute lin query language with rate limit, based on execution statement returns different response.\n1. metric data/metadata query statement;\n2. cluster metadata/state query statement;\n3. database/storage management statement;",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LinQL"
                ],
                "summary": "execute lin query language",
                "parameters": [
                    {
                        "description": "param data",
                        "name": "param",
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.ExecuteParam"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Metadata"
                        }
                    },
                    "404": {
                        "description": "not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/state/machine/explore": {
            "get": {
                "description": "explores the state from state machine of current node.\n1. Broker State Machine;\n2. Master State Machine;\n3. Storage State Machine;",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Internal"
                ],
                "summary": "explore the state from state machine.",
                "parameters": [
                    {
                        "description": "param data",
                        "name": "param",
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/Param"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.StorageState"
                            }
                        }
                    },
                    "404": {
                        "description": "not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Database": {
            "type": "object",
            "required": [
                "name",
                "storage"
            ],
            "properties": {
                "desc": {
                    "type": "string"
                },
                "name": {
                    "description": "database's name",
                    "type": "string"
                },
                "numOfShard": {
                    "description": "num. of shard",
                    "type": "integer"
                },
                "option": {
                    "description": "time series database option",
                    "type": "object",
                    "$ref": "#/definitions/option.DatabaseOption"
                },
                "replicaFactor": {
                    "description": "replica refactor",
                    "type": "integer"
                },
                "storage": {
                    "description": "storage cluster's name",
                    "type": "string"
                }
            }
        },
        "models.ExecuteParam": {
            "type": "object",
            "required": [
                "sql"
            ],
            "properties": {
                "db": {
                    "type": "string"
                },
                "sql": {
                    "type": "string"
                }
            }
        },
        "models.Metadata": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "values": {
                    "type": "object"
                }
            }
        },
        "models.QueryStats": {
            "type": "object",
            "properties": {
                "brokerNodes": {
                    "type": "object"
                },
                "expressCost": {
                    "type": "integer"
                },
                "netPayload": {
                    "type": "integer"
                },
                "planCost": {
                    "type": "integer"
                },
                "storageNodes": {
                    "type": "object"
                },
                "totalCost": {
                    "description": "total query cost",
                    "type": "integer"
                },
                "waitCost": {
                    "description": "wait intermediate or leaf response duration",
                    "type": "integer"
                }
            }
        },
        "models.ResultSet": {
            "type": "object",
            "properties": {
                "endTime": {
                    "type": "integer"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupBy": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "interval": {
                    "type": "integer"
                },
                "metricName": {
                    "type": "string"
                },
                "series": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Series"
                    }
                },
                "startTime": {
                    "type": "integer"
                },
                "stats": {
                    "type": "object",
                    "$ref": "#/definitions/models.QueryStats"
                }
            }
        },
        "models.Series": {
            "type": "object",
            "properties": {
                "fields": {
                    "type": "object"
                },
                "tags": {
                    "type": "object"
                }
            }
        },
        "models.StorageState": {
            "type": "object",
            "properties": {
                "liveNodes": {
                    "type": "object"
                },
                "name": {
                    "description": "ref Namespace",
                    "type": "string"
                },
                "shardAssignments": {
                    "description": "TODO remove??",
                    "type": "object"
                },
                "shardStates": {
                    "description": "database's name =\u003e shard state",
                    "type": "object"
                }
            }
        },
        "option.DatabaseOption": {
            "type": "object",
            "properties": {
                "ahead": {
                    "type": "integer"
                },
                "autoCreateNS": {
                    "description": "auto create namespace",
                    "type": "boolean"
                },
                "behind": {
                    "description": "allowed timestamp write behind",
                    "type": "string"
                },
                "data": {
                    "description": "data flusher data",
                    "type": "object",
                    "$ref": "#/definitions/option.FlusherOption"
                },
                "index": {
                    "description": "index flusher option",
                    "type": "object",
                    "$ref": "#/definitions/option.FlusherOption"
                },
                "intervals": {
                    "description": "write interval(the number of second) =\u003e TTL\nrollup intervals(like seconds-\u003eminute-\u003ehour-\u003eday)",
                    "type": "object",
                    "$ref": "#/definitions/option.Intervals"
                }
            }
        },
        "option.FlusherOption": {
            "type": "object",
            "properties": {
                "sizeThreshold": {
                    "description": "size level flush threshold, unit(MB)",
                    "type": "integer"
                },
                "timeThreshold": {
                    "description": "time level flush threshold",
                    "type": "integer"
                }
            }
        },
        "option.Interval": {
            "type": "object",
            "required": [
                "interval",
                "retention"
            ],
            "properties": {
                "interval": {
                    "type": "integer"
                },
                "retention": {
                    "type": "integer"
                }
            }
        },
        "option.Intervals": {
            "type": "array",
            "items": {
                "type": "object",
                "required": [
                    "interval",
                    "retention"
                ],
                "properties": {
                    "interval": {
                        "type": "integer"
                    },
                    "retention": {
                        "type": "integer"
                    }
                }
            }
        }
    }
}