// Generated by tmpl
// https://github.com/benbjohnson/tmpl
//
// DO NOT EDIT!
// Source: int_map_test.tmpl

package indexdb

import (
	"testing"

	"github.com/lindb/roaring"
	"github.com/stretchr/testify/assert"
)

// hack test
func _assertTagIndexStoreData(t *testing.T, keys []uint32, m *TagIndexStore) {
	for _, key := range keys {
		found, highIdx, lowIdx := m.keys.ContainsAndRank(key)
		assert.True(t, found)
		assert.NotNil(t, m.values[highIdx][lowIdx-1])
	}
}

func TestTagIndexStore_Put(t *testing.T) {
	m := NewTagIndexStore()
	m.Put(1, newTagIndex())
	m.Put(8, newTagIndex())
	m.Put(3, newTagIndex())
	m.Put(5, newTagIndex())
	m.Put(6, newTagIndex())
	m.Put(7, newTagIndex())
	m.Put(4, newTagIndex())
	m.Put(2, newTagIndex())
	// test insert new high
	m.Put(2000000, newTagIndex())
	// test insert new high
	m.Put(200000, newTagIndex())

	_assertTagIndexStoreData(t, []uint32{1, 2, 3, 4, 5, 6, 7, 8, 200000, 2000000}, m)
	assert.Equal(t, 10, m.Size())
	assert.Len(t, m.Values(), 3)
}

func TestTagIndexStore_Get(t *testing.T) {
	m := NewTagIndexStore()
	store, ok := m.Get(uint32(10))
	assert.Nil(t, store)
	assert.False(t, ok)
	m.Put(1, newTagIndex())
	m.Put(8, newTagIndex())
	_, ok = m.Get(1)
	assert.True(t, ok)
	_, ok = m.Get(2)
	assert.False(t, ok)
	_, ok = m.Get(0)
	assert.False(t, ok)
	_, ok = m.Get(9)
	assert.False(t, ok)
}

func TestTagIndexStore_Keys(t *testing.T) {
	m := NewTagIndexStore()
	m.Put(1, newTagIndex())
	m.Put(8, newTagIndex())
	assert.Equal(t, roaring.BitmapOf(1, 8), m.Keys())
}
