// Generated by tmpl
// https://github.com/benbjohnson/tmpl
//
// DO NOT EDIT!
// Source: int_map.tmpl

package indexdb

import (
	"github.com/lindb/roaring"
)

// TagIndexStore represents int map using roaring bitmap
type TagIndexStore struct {
	keys   *roaring.Bitmap // store all keys
	values [][]TagIndex    // store all values by high/low key
}

// NewTagIndexStore creates a int map
func NewTagIndexStore() *TagIndexStore {
	return &TagIndexStore{
		keys: roaring.New(),
	}
}

// Get returns value by key, if exist returns it, else returns nil, false
func (m *TagIndexStore) Get(key uint32) (TagIndex, bool) {
	if len(m.values) == 0 {
		return nil, false
	}
	found, highIdx, lowIdx := m.keys.ContainsAndRank(key)
	if !found {
		return nil, false
	}
	return m.values[highIdx][lowIdx-1], true
}

// Put puts the value by key
func (m *TagIndexStore) Put(key uint32, value TagIndex) {
	if len(m.values) == 0 {
		// if values is empty, append new low container directly
		m.keys.Add(key)
		m.values = append(m.values, []TagIndex{value})
		return
	}

	// try find key if exist
	found, highIdx, lowIdx := m.keys.ContainsAndRank(key)
	if !found {
		// not found
		m.keys.Add(key)
		if highIdx >= 0 {
			// high container exist
			stores := m.values[highIdx]
			// insert operation
			stores = append(stores, nil)
			copy(stores[lowIdx+1:], stores[lowIdx:len(stores)-1])
			stores[lowIdx] = value
			m.values[highIdx] = stores
		} else {
			// high container not exist, append operation
			m.values = append(m.values, []TagIndex{value})
		}
	}
}

// Keys returns the all keys
func (m *TagIndexStore) Keys() *roaring.Bitmap {
	return m.keys
}

// Values returns the all values
func (m *TagIndexStore) Values() [][]TagIndex {
	return m.values
}

// size returns the size of keys
func (m *TagIndexStore) Size() int {
	return int(m.keys.GetCardinality())
}
