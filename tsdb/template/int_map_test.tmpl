{{range .}}

package {{.package}}

import (
	"fmt"
	"testing"

	"github.com/lindb/roaring"
	"github.com/stretchr/testify/assert"
)

// hack test
func _assert{{.type}}StoreData(t *testing.T, keys []uint32, m *{{.type}}Store) {
	for _, key := range keys {
		found, highIdx := m.keys.ContainsAndRankForHigh(key)
		assert.True(t, found)
		lowIdx := m.keys.RankForLow(key, highIdx-1)
		assert.True(t, found)
		assert.NotNil(t, m.values[highIdx-1][lowIdx-1])
	}
}

func Test{{.type}}Store_Put(t *testing.T) {
	m := New{{.type}}Store()
	m.Put(1, {{.value}})
	m.Put(8, {{.value}})
	m.Put(3, {{.value}})
	m.Put(5, {{.value}})
	m.Put(6, {{.value}})
	m.Put(7, {{.value}})
	m.Put(4, {{.value}})
	m.Put(2, {{.value}})
	// test insert new high
	m.Put(2000000, {{.value}})
	m.Put(2000001, {{.value}})
	// test insert new high
	m.Put(200000, {{.value}})

	_assert{{.type}}StoreData(t, []uint32{1, 2, 3, 4, 5, 6, 7, 8, 200000, 2000000, 2000001}, m)
	assert.Equal(t, 11, m.Size())
	assert.Len(t, m.Values(), 3)

	err := m.WalkEntry(func(key uint32, value {{.valueType}}) error {
		return fmt.Errorf("err")
	})
	assert.Error(t, err)

	keys := []uint32{1, 2, 3, 4, 5, 6, 7, 8, 200000, 2000000, 2000001}
	idx := 0
	err = m.WalkEntry(func(key uint32, value {{.valueType}}) error {
		assert.Equal(t, keys[idx], key)
		idx++
		return nil
	})
	assert.NoError(t, err)
}

func Test{{.type}}Store_Get(t *testing.T) {
	m := New{{.type}}Store()
	_, ok := m.Get(uint32(10))
	assert.False(t, ok)
	m.Put(1, {{.value}})
	m.Put(8, {{.value}})
	_, ok = m.Get(1)
	assert.True(t, ok)
	_, ok = m.Get(2)
	assert.False(t, ok)
	_, ok = m.Get(0)
	assert.False(t, ok)
	_, ok = m.Get(9)
	assert.False(t, ok)
	_, ok = m.Get(999999)
	assert.False(t, ok)
}

func Test{{.type}}Store_Keys(t *testing.T) {
	m := New{{.type}}Store()
	m.Put(1, {{.value}})
	m.Put(8, {{.value}})
	assert.Equal(t, roaring.BitmapOf(1, 8), m.Keys())
}

{{end}}
