// Generated by tmpl
// https://github.com/benbjohnson/tmpl
//
// DO NOT EDIT!
// Source: int_map.tmpl

package metadb

import (
	"github.com/lindb/roaring"
)

// TagStore represents int map using roaring bitmap
type TagStore struct {
	keys   *roaring.Bitmap // store all keys
	values [][]TagEntry    // store all values by high/low key
}

// NewTagStore creates a int map
func NewTagStore() *TagStore {
	return &TagStore{
		keys: roaring.New(),
	}
}

// Get returns value by key, if exist returns it, else returns nil, false
func (m *TagStore) Get(key uint32) (TagEntry, bool) {
	if len(m.values) == 0 {
		return nil, false
	}
	found, highIdx, lowIdx := m.keys.ContainsAndRank(key)
	if !found {
		return nil, false
	}
	return m.values[highIdx][lowIdx-1], true
}

// Put puts the value by key
func (m *TagStore) Put(key uint32, value TagEntry) {
	if len(m.values) == 0 {
		// if values is empty, append new low container directly
		m.keys.Add(key)
		m.values = append(m.values, []TagEntry{value})
		return
	}

	// try find key if exist
	found, highIdx, lowIdx := m.keys.ContainsAndRank(key)
	if !found {
		// not found
		m.keys.Add(key)
		if highIdx >= 0 {
			// high container exist
			stores := m.values[highIdx]
			// insert operation
			stores = append(stores, nil)
			copy(stores[lowIdx+1:], stores[lowIdx:len(stores)-1])
			stores[lowIdx] = value
			m.values[highIdx] = stores
		} else {
			// high container not exist, append operation
			m.values = append(m.values, []TagEntry{value})
		}
	}
}

// Keys returns the all keys
func (m *TagStore) Keys() *roaring.Bitmap {
	return m.keys
}

// Values returns the all values
func (m *TagStore) Values() [][]TagEntry {
	return m.values
}

// size returns the size of keys
func (m *TagStore) Size() int {
	return int(m.keys.GetCardinality())
}

// WalkEntry walks each kv entry via fn.
func (m *TagStore) WalkEntry(fn func(key uint32, value TagEntry) error) error {
	values := m.values
	keys := m.keys
	highKeys := keys.GetHighKeys()
	for highIdx, highKey := range highKeys {
		hk := uint32(highKey) << 16
		lowValues := values[highIdx]
		lowContainer := keys.GetContainerAtIndex(highIdx)
		it := lowContainer.PeekableIterator()
		idx := 0
		for it.HasNext() {
			lowKey := it.Next()
			value := lowValues[idx]
			idx++
			if err := fn(uint32(lowKey&0xFFFF)|hk, value); err != nil {
				return err
			}
		}
	}
	return nil
}
