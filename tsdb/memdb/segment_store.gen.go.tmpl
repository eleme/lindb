package memdb

import (
	"github.com/lindb/lindb/series/field"
)

{{range .}}

func (fs *complexFieldStore) Write{{.Name}}(
	pFieldID uint16,
	value {{.type}},
	writeCtx writeContext,
) int {
	oldSize := fs.MemSize()
	block, ok := fs.blocks[pFieldID]
	aggFunc := fs.schema.GetAggFunc(pFieldID)
	currentBlock, pos, hasValue := calcTimeWindow(block, writeCtx.blockStore, writeCtx.slotIndex, field.{{.Type}}, aggFunc)
	if !ok {
		fs.blocks[pFieldID] = currentBlock
	}
	if hasValue {
		// do rollup using agg func
		currentBlock.set{{.Name}}Value(pos, aggFunc.Aggregate{{.Name}}(currentBlock.get{{.Name}}Value(pos), value))
	} else {
		currentBlock.set{{.Name}}Value(pos, value)
	}
	return fs.MemSize() - oldSize
}


func (fs *simpleFieldStore) Write{{.Name}}(pFieldID uint16, value {{.type}}, writeCtx writeContext) int {
	oldSize := fs.MemSize()
	currentBlock, pos, hasValue := calcTimeWindow(fs.block, writeCtx.blockStore, writeCtx.slotIndex, field.{{.Type}}, fs.aggFunc)
	fs.block = currentBlock
	if hasValue {
		// do rollup using agg func
		currentBlock.set{{.Name}}Value(pos, fs.aggFunc.Aggregate{{.Name}}(currentBlock.get{{.Name}}Value(pos), value))
	} else {
		currentBlock.set{{.Name}}Value(pos, value)
	}
	return fs.MemSize() - oldSize
}


{{end}}