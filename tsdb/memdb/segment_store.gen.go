// Generated by tmpl
// https://github.com/benbjohnson/tmpl
//
// DO NOT EDIT!
// Source: segment_store.gen.go.tmpl

package memdb

import (
	"github.com/lindb/lindb/series/field"
)

func (fs *complexFieldStore) WriteInt(
	pFieldID uint16,
	value int64,
	writeCtx writeContext,
) int {
	oldSize := fs.MemSize()
	block, ok := fs.blocks[pFieldID]
	aggFunc := fs.schema.GetAggFunc(pFieldID)
	currentBlock, pos, hasValue := calcTimeWindow(block, writeCtx.blockStore, writeCtx.slotIndex, field.Integer, aggFunc)
	if !ok {
		fs.blocks[pFieldID] = currentBlock
	}
	if hasValue {
		// do rollup using agg func
		currentBlock.setIntValue(pos, aggFunc.AggregateInt(currentBlock.getIntValue(pos), value))
	} else {
		currentBlock.setIntValue(pos, value)
	}
	return fs.MemSize() - oldSize
}

func (fs *complexFieldStore) WriteFloat(
	pFieldID uint16,
	value float64,
	writeCtx writeContext,
) int {
	oldSize := fs.MemSize()
	block, ok := fs.blocks[pFieldID]
	aggFunc := fs.schema.GetAggFunc(pFieldID)
	currentBlock, pos, hasValue := calcTimeWindow(block, writeCtx.blockStore, writeCtx.slotIndex, field.Float, aggFunc)
	if !ok {
		fs.blocks[pFieldID] = currentBlock
	}
	if hasValue {
		// do rollup using agg func
		currentBlock.setFloatValue(pos, aggFunc.AggregateFloat(currentBlock.getFloatValue(pos), value))
	} else {
		currentBlock.setFloatValue(pos, value)
	}
	return fs.MemSize() - oldSize
}
