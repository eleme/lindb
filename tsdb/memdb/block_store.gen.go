// Generated by tmpl
// https://github.com/benbjohnson/tmpl
//
// DO NOT EDIT!
// Source: block_store.gen.go.tmpl

package memdb

import "math/bits"

// intBlock represents a int block for storing metric point in memory
type intBlock struct {
	// container(bit array) is a mapping from 64 value to uint64 in big-endian,
	// it is a temporary data-structure for compressing data.
	container uint64
	values    []int64
}

// newIntBlock returns int block with fixed time window
func newIntBlock(size uint16) *intBlock {
	return &intBlock{
		values: make([]int64, size),
	}
}

// getSize returns the size of values
func (b *intBlock) getSize() uint16 {
	if b.container == 0 {
		return 0
	}
	// get trailing zeros for container
	trailing := bits.TrailingZeros64(b.container)
	return uint16(maxTimeWindow - trailing - 1)
}

// hasValue returns whether value is absent or present at pos, if present return true
func (b *intBlock) hasValue(pos uint16) bool {
	return b.container&(1<<uint64(maxTimeWindow-pos-1)) != 0
}

// setIntValue updates int64 value with pos
func (b *intBlock) setIntValue(pos uint16, value int64) {
	b.container |= 1 << uint64(maxTimeWindow-pos-1)
	b.values[pos] = value
}

// getIntValue return int64 value for pos
func (b *intBlock) getIntValue(pos uint16) int64 {
	return b.values[pos]
}

// memsize returns the memory size in bytes count
func (b *intBlock) memsize() int {
	return emptyContainerSize + cap(b.values)*8
}

// reset cleans block data, just reset container mark
func (b *intBlock) reset() {
	b.container = 0
}

func (b *intBlock) isEmpty() bool {
	return b.container == 0
}

// floatBlock represents a float block for storing metric point in memory
type floatBlock struct {
	// container(bit array) is a mapping from 64 value to uint64 in big-endian,
	// it is a temporary data-structure for compressing data.
	container uint64
	values    []float64
}

// newFloatBlock returns float block with fixed time window
func newFloatBlock(size uint16) *floatBlock {
	return &floatBlock{
		values: make([]float64, size),
	}
}

// getSize returns the size of values
func (b *floatBlock) getSize() uint16 {
	if b.container == 0 {
		return 0
	}
	// get trailing zeros for container
	trailing := bits.TrailingZeros64(b.container)
	return uint16(maxTimeWindow - trailing - 1)
}

// hasValue returns whether value is absent or present at pos, if present return true
func (b *floatBlock) hasValue(pos uint16) bool {
	return b.container&(1<<uint64(maxTimeWindow-pos-1)) != 0
}

// setFloatValue updates int64 value with pos
func (b *floatBlock) setFloatValue(pos uint16, value float64) {
	b.container |= 1 << uint64(maxTimeWindow-pos-1)
	b.values[pos] = value
}

// getFloatValue return int64 value for pos
func (b *floatBlock) getFloatValue(pos uint16) float64 {
	return b.values[pos]
}

// memsize returns the memory size in bytes count
func (b *floatBlock) memsize() int {
	return emptyContainerSize + cap(b.values)*8
}

// reset cleans block data, just reset container mark
func (b *floatBlock) reset() {
	b.container = 0
}

func (b *floatBlock) isEmpty() bool {
	return b.container == 0
}
