// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: batch.proto

package batch

import (
	context "context"
	fmt "fmt"
	broker "github.com/eleme/lindb/rpc/pkg/broker"
	common "github.com/eleme/lindb/rpc/pkg/common"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BatchRequest struct {
	RequestIDs           []uint64                `protobuf:"varint,1,rep,packed,name=requestIDs,proto3" json:"requestIDs,omitempty"`
	Requests             []*BatchRequest_Request `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *BatchRequest) Reset()         { *m = BatchRequest{} }
func (m *BatchRequest) String() string { return proto.CompactTextString(m) }
func (*BatchRequest) ProtoMessage()    {}
func (*BatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_905061dbf2994c5e, []int{0}
}
func (m *BatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchRequest.Merge(m, src)
}
func (m *BatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *BatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchRequest proto.InternalMessageInfo

func (m *BatchRequest) GetRequestIDs() []uint64 {
	if m != nil {
		return m.RequestIDs
	}
	return nil
}

func (m *BatchRequest) GetRequests() []*BatchRequest_Request {
	if m != nil {
		return m.Requests
	}
	return nil
}

type BatchRequest_Request struct {
	RequestTyp common.RequestType `protobuf:"varint,1,opt,name=requestTyp,proto3,enum=common.RequestType" json:"requestTyp,omitempty"`
	// Types that are valid to be assigned to Request:
	//	*BatchRequest_Request_WritePoints
	Request              isBatchRequest_Request_Request `protobuf_oneof:"request"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *BatchRequest_Request) Reset()         { *m = BatchRequest_Request{} }
func (m *BatchRequest_Request) String() string { return proto.CompactTextString(m) }
func (*BatchRequest_Request) ProtoMessage()    {}
func (*BatchRequest_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_905061dbf2994c5e, []int{0, 0}
}
func (m *BatchRequest_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchRequest_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchRequest_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchRequest_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchRequest_Request.Merge(m, src)
}
func (m *BatchRequest_Request) XXX_Size() int {
	return m.Size()
}
func (m *BatchRequest_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchRequest_Request.DiscardUnknown(m)
}

var xxx_messageInfo_BatchRequest_Request proto.InternalMessageInfo

type isBatchRequest_Request_Request interface {
	isBatchRequest_Request_Request()
	MarshalTo([]byte) (int, error)
	Size() int
}

type BatchRequest_Request_WritePoints struct {
	WritePoints *broker.WritePointsRequest `protobuf:"bytes,2,opt,name=writePoints,proto3,oneof"`
}

func (*BatchRequest_Request_WritePoints) isBatchRequest_Request_Request() {}

func (m *BatchRequest_Request) GetRequest() isBatchRequest_Request_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *BatchRequest_Request) GetRequestTyp() common.RequestType {
	if m != nil {
		return m.RequestTyp
	}
	return common.RequestType_WritePoints
}

func (m *BatchRequest_Request) GetWritePoints() *broker.WritePointsRequest {
	if x, ok := m.GetRequest().(*BatchRequest_Request_WritePoints); ok {
		return x.WritePoints
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BatchRequest_Request) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BatchRequest_Request_OneofMarshaler, _BatchRequest_Request_OneofUnmarshaler, _BatchRequest_Request_OneofSizer, []interface{}{
		(*BatchRequest_Request_WritePoints)(nil),
	}
}

func _BatchRequest_Request_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BatchRequest_Request)
	// request
	switch x := m.Request.(type) {
	case *BatchRequest_Request_WritePoints:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WritePoints); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BatchRequest_Request.Request has unexpected type %T", x)
	}
	return nil
}

func _BatchRequest_Request_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BatchRequest_Request)
	switch tag {
	case 2: // request.writePoints
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(broker.WritePointsRequest)
		err := b.DecodeMessage(msg)
		m.Request = &BatchRequest_Request_WritePoints{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BatchRequest_Request_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BatchRequest_Request)
	// request
	switch x := m.Request.(type) {
	case *BatchRequest_Request_WritePoints:
		s := proto.Size(x.WritePoints)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type BatchResponse struct {
	RequestIDs           []uint64                  `protobuf:"varint,1,rep,packed,name=requestIDs,proto3" json:"requestIDs,omitempty"`
	Responses            []*BatchResponse_Response `protobuf:"bytes,2,rep,name=responses,proto3" json:"responses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *BatchResponse) Reset()         { *m = BatchResponse{} }
func (m *BatchResponse) String() string { return proto.CompactTextString(m) }
func (*BatchResponse) ProtoMessage()    {}
func (*BatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_905061dbf2994c5e, []int{1}
}
func (m *BatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchResponse.Merge(m, src)
}
func (m *BatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *BatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchResponse proto.InternalMessageInfo

func (m *BatchResponse) GetRequestIDs() []uint64 {
	if m != nil {
		return m.RequestIDs
	}
	return nil
}

func (m *BatchResponse) GetResponses() []*BatchResponse_Response {
	if m != nil {
		return m.Responses
	}
	return nil
}

type BatchResponse_Response struct {
	RequestType common.RequestType `protobuf:"varint,1,opt,name=requestType,proto3,enum=common.RequestType" json:"requestType,omitempty"`
	// Types that are valid to be assigned to Response:
	//	*BatchResponse_Response_WritePoints
	Response             isBatchResponse_Response_Response `protobuf_oneof:"response"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *BatchResponse_Response) Reset()         { *m = BatchResponse_Response{} }
func (m *BatchResponse_Response) String() string { return proto.CompactTextString(m) }
func (*BatchResponse_Response) ProtoMessage()    {}
func (*BatchResponse_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_905061dbf2994c5e, []int{1, 0}
}
func (m *BatchResponse_Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchResponse_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchResponse_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchResponse_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchResponse_Response.Merge(m, src)
}
func (m *BatchResponse_Response) XXX_Size() int {
	return m.Size()
}
func (m *BatchResponse_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchResponse_Response.DiscardUnknown(m)
}

var xxx_messageInfo_BatchResponse_Response proto.InternalMessageInfo

type isBatchResponse_Response_Response interface {
	isBatchResponse_Response_Response()
	MarshalTo([]byte) (int, error)
	Size() int
}

type BatchResponse_Response_WritePoints struct {
	WritePoints *broker.WritePointsResponse `protobuf:"bytes,2,opt,name=writePoints,proto3,oneof"`
}

func (*BatchResponse_Response_WritePoints) isBatchResponse_Response_Response() {}

func (m *BatchResponse_Response) GetResponse() isBatchResponse_Response_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *BatchResponse_Response) GetRequestType() common.RequestType {
	if m != nil {
		return m.RequestType
	}
	return common.RequestType_WritePoints
}

func (m *BatchResponse_Response) GetWritePoints() *broker.WritePointsResponse {
	if x, ok := m.GetResponse().(*BatchResponse_Response_WritePoints); ok {
		return x.WritePoints
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BatchResponse_Response) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BatchResponse_Response_OneofMarshaler, _BatchResponse_Response_OneofUnmarshaler, _BatchResponse_Response_OneofSizer, []interface{}{
		(*BatchResponse_Response_WritePoints)(nil),
	}
}

func _BatchResponse_Response_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BatchResponse_Response)
	// response
	switch x := m.Response.(type) {
	case *BatchResponse_Response_WritePoints:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WritePoints); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BatchResponse_Response.Response has unexpected type %T", x)
	}
	return nil
}

func _BatchResponse_Response_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BatchResponse_Response)
	switch tag {
	case 2: // response.writePoints
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(broker.WritePointsResponse)
		err := b.DecodeMessage(msg)
		m.Response = &BatchResponse_Response_WritePoints{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BatchResponse_Response_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BatchResponse_Response)
	// response
	switch x := m.Response.(type) {
	case *BatchResponse_Response_WritePoints:
		s := proto.Size(x.WritePoints)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*BatchRequest)(nil), "batch.BatchRequest")
	proto.RegisterType((*BatchRequest_Request)(nil), "batch.BatchRequest.Request")
	proto.RegisterType((*BatchResponse)(nil), "batch.BatchResponse")
	proto.RegisterType((*BatchResponse_Response)(nil), "batch.BatchResponse.Response")
}

func init() { proto.RegisterFile("batch.proto", fileDescriptor_905061dbf2994c5e) }

var fileDescriptor_905061dbf2994c5e = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x4a, 0x2c, 0x49,
	0xce, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0xa4, 0x78, 0x92, 0x8a, 0xf2,
	0xb3, 0x53, 0x8b, 0x20, 0x82, 0x52, 0x3c, 0xc9, 0xf9, 0xb9, 0xb9, 0xf9, 0x79, 0x10, 0x9e, 0xd2,
	0x67, 0x46, 0x2e, 0x1e, 0x27, 0x90, 0xaa, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x39,
	0x2e, 0xae, 0x22, 0x08, 0xd3, 0xd3, 0xa5, 0x58, 0x82, 0x51, 0x81, 0x59, 0x83, 0x25, 0x08, 0x49,
	0x44, 0xc8, 0x9c, 0x8b, 0x03, 0xca, 0x2b, 0x96, 0x60, 0x52, 0x60, 0xd6, 0xe0, 0x36, 0x92, 0xd6,
	0x83, 0xd8, 0x89, 0x6c, 0x8c, 0x1e, 0x94, 0x0e, 0x82, 0x2b, 0x96, 0xea, 0x64, 0xe4, 0x62, 0x87,
	0x59, 0x62, 0x0c, 0xb7, 0x24, 0xa4, 0xb2, 0x40, 0x82, 0x51, 0x81, 0x51, 0x83, 0xcf, 0x48, 0x58,
	0x0f, 0xea, 0xb0, 0x20, 0xb8, 0x4c, 0x6a, 0x10, 0x92, 0x32, 0x21, 0x3b, 0x2e, 0xee, 0xf2, 0xa2,
	0xcc, 0x92, 0xd4, 0x80, 0xfc, 0xcc, 0x3c, 0xb0, 0xe5, 0x8c, 0x1a, 0xdc, 0x46, 0x52, 0x7a, 0x50,
	0xcf, 0x85, 0x23, 0xa4, 0xa0, 0x06, 0x78, 0x30, 0x04, 0x21, 0x6b, 0x70, 0xe2, 0xe4, 0x62, 0x87,
	0x9a, 0xa6, 0xf4, 0x97, 0x91, 0x8b, 0x17, 0xea, 0xdc, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x82,
	0xde, 0xb6, 0xe6, 0xe2, 0x2c, 0x82, 0xaa, 0x85, 0xf9, 0x5b, 0x16, 0xd5, 0xdf, 0x10, 0x49, 0x3d,
	0x18, 0x23, 0x08, 0xa1, 0x5e, 0xaa, 0x8f, 0x91, 0x8b, 0x03, 0x6e, 0x93, 0x29, 0x17, 0x37, 0xc2,
	0x53, 0xa9, 0xf8, 0x3c, 0x8f, 0xac, 0x4e, 0xc8, 0x1e, 0x9b, 0xef, 0xa5, 0xb1, 0xfa, 0x1e, 0x62,
	0x11, 0xba, 0xf7, 0xb9, 0x40, 0x11, 0x07, 0x91, 0x32, 0x0a, 0x85, 0x46, 0x7a, 0x70, 0x6a, 0x51,
	0x59, 0x66, 0x72, 0xaa, 0x90, 0x2b, 0x97, 0x50, 0x70, 0x49, 0x51, 0x6a, 0x62, 0x2e, 0x4a, 0x52,
	0x10, 0xc6, 0x12, 0xb1, 0x52, 0x22, 0xd8, 0x7c, 0xad, 0xc4, 0xa0, 0xc1, 0x68, 0xc0, 0xe8, 0x24,
	0x70, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xce, 0x78, 0x2c,
	0xc7, 0x90, 0xc4, 0x06, 0x4e, 0x65, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x35, 0x42,
	0x37, 0x97, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BatchServiceClient is the client API for BatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BatchServiceClient interface {
	StreamBatchRequest(ctx context.Context, opts ...grpc.CallOption) (BatchService_StreamBatchRequestClient, error)
}

type batchServiceClient struct {
	cc *grpc.ClientConn
}

func NewBatchServiceClient(cc *grpc.ClientConn) BatchServiceClient {
	return &batchServiceClient{cc}
}

func (c *batchServiceClient) StreamBatchRequest(ctx context.Context, opts ...grpc.CallOption) (BatchService_StreamBatchRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BatchService_serviceDesc.Streams[0], "/batch.BatchService/StreamBatchRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &batchServiceStreamBatchRequestClient{stream}
	return x, nil
}

type BatchService_StreamBatchRequestClient interface {
	Send(*BatchRequest) error
	Recv() (*BatchResponse, error)
	grpc.ClientStream
}

type batchServiceStreamBatchRequestClient struct {
	grpc.ClientStream
}

func (x *batchServiceStreamBatchRequestClient) Send(m *BatchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *batchServiceStreamBatchRequestClient) Recv() (*BatchResponse, error) {
	m := new(BatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BatchServiceServer is the server API for BatchService service.
type BatchServiceServer interface {
	StreamBatchRequest(BatchService_StreamBatchRequestServer) error
}

func RegisterBatchServiceServer(s *grpc.Server, srv BatchServiceServer) {
	s.RegisterService(&_BatchService_serviceDesc, srv)
}

func _BatchService_StreamBatchRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BatchServiceServer).StreamBatchRequest(&batchServiceStreamBatchRequestServer{stream})
}

type BatchService_StreamBatchRequestServer interface {
	Send(*BatchResponse) error
	Recv() (*BatchRequest, error)
	grpc.ServerStream
}

type batchServiceStreamBatchRequestServer struct {
	grpc.ServerStream
}

func (x *batchServiceStreamBatchRequestServer) Send(m *BatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *batchServiceStreamBatchRequestServer) Recv() (*BatchRequest, error) {
	m := new(BatchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _BatchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "batch.BatchService",
	HandlerType: (*BatchServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamBatchRequest",
			Handler:       _BatchService_StreamBatchRequest_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "batch.proto",
}

func (m *BatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequestIDs) > 0 {
		dAtA2 := make([]byte, len(m.RequestIDs)*10)
		var j1 int
		for _, num := range m.RequestIDs {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintBatch(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Requests) > 0 {
		for _, msg := range m.Requests {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBatch(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchRequest_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchRequest_Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RequestTyp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBatch(dAtA, i, uint64(m.RequestTyp))
	}
	if m.Request != nil {
		nn3, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchRequest_Request_WritePoints) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.WritePoints != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBatch(dAtA, i, uint64(m.WritePoints.Size()))
		n4, err := m.WritePoints.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *BatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequestIDs) > 0 {
		dAtA6 := make([]byte, len(m.RequestIDs)*10)
		var j5 int
		for _, num := range m.RequestIDs {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintBatch(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if len(m.Responses) > 0 {
		for _, msg := range m.Responses {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBatch(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchResponse_Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchResponse_Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RequestType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBatch(dAtA, i, uint64(m.RequestType))
	}
	if m.Response != nil {
		nn7, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn7
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchResponse_Response_WritePoints) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.WritePoints != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBatch(dAtA, i, uint64(m.WritePoints.Size()))
		n8, err := m.WritePoints.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func encodeVarintBatch(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequestIDs) > 0 {
		l = 0
		for _, e := range m.RequestIDs {
			l += sovBatch(uint64(e))
		}
		n += 1 + sovBatch(uint64(l)) + l
	}
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchRequest_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestTyp != 0 {
		n += 1 + sovBatch(uint64(m.RequestTyp))
	}
	if m.Request != nil {
		n += m.Request.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchRequest_Request_WritePoints) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WritePoints != nil {
		l = m.WritePoints.Size()
		n += 1 + l + sovBatch(uint64(l))
	}
	return n
}
func (m *BatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequestIDs) > 0 {
		l = 0
		for _, e := range m.RequestIDs {
			l += sovBatch(uint64(e))
		}
		n += 1 + sovBatch(uint64(l)) + l
	}
	if len(m.Responses) > 0 {
		for _, e := range m.Responses {
			l = e.Size()
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchResponse_Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestType != 0 {
		n += 1 + sovBatch(uint64(m.RequestType))
	}
	if m.Response != nil {
		n += m.Response.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchResponse_Response_WritePoints) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WritePoints != nil {
		l = m.WritePoints.Size()
		n += 1 + l + sovBatch(uint64(l))
	}
	return n
}

func sovBatch(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBatch(x uint64) (n int) {
	return sovBatch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RequestIDs = append(m.RequestIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBatch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBatch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RequestIDs) == 0 {
					m.RequestIDs = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RequestIDs = append(m.RequestIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIDs", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &BatchRequest_Request{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchRequest_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTyp", wireType)
			}
			m.RequestTyp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestTyp |= common.RequestType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WritePoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &broker.WritePointsRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &BatchRequest_Request_WritePoints{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RequestIDs = append(m.RequestIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBatch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBatch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RequestIDs) == 0 {
					m.RequestIDs = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RequestIDs = append(m.RequestIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIDs", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, &BatchResponse_Response{})
			if err := m.Responses[len(m.Responses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchResponse_Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestType", wireType)
			}
			m.RequestType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestType |= common.RequestType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WritePoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &broker.WritePointsResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &BatchResponse_Response_WritePoints{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBatch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBatch
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthBatch
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBatch
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBatch(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthBatch
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBatch = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBatch   = fmt.Errorf("proto: integer overflow")
)
