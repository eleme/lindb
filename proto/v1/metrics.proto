syntax = "proto3";

package protoMetricsV1;

message MetricList {
    repeated Metric metrics = 2;
}

// Defines a Metric which has one or more timeseries.  The following is a
// brief summary of the Metric data model.  For more details, see:
//
//   https://lindb.io/zh/docs/concept/datamodel.html
//
// Here, "Field" is the term used to refer any specific field with exemplars.
// and "Data" is the term used to refer to the specific underlying value for the field.
//
// - Metric is composed of metadata、timestamp and fields.
// - Metadata part contains a namespace, name, tags and its sorted-concat-string hash.
// - Fields is the array of the possible fields (Sum, Gauge, Histogram).
// - Fields contains exemplars, names, and the underlying value or value list
//
//     Metric
//  +---------------+
//  |namespace      |
//  |name           |
//  |tags           |
//  |tags-hash      |
//  |timestamp      |     +------------------------------------+
//  |simple-fields  |---> |Gauge, Sum, ...                     |
//  |compound-field |---> |Histogram                           |
//  +---------------+     +------------------------------------+
//
//  SimpleField   [One of Gauge, CumulativeSum, DeltaSum ...]
//  +-----------+
//  |name       |  // field-name
//  |type       |  // field-type
//  |exemplars  |  // exemplars of series
//  +-----------+
//  |value      |
//  +-----------+
//
//  CompoundField  [One of CumulativeHistogram, DeltaHistogram ...]
//  +-----------+
//  |type       |  // field-type
//  |exemplars  |  // exemplars of series
//  +-----+-----+-----+-----+-----+-----+
//  |min  |max  |sum  |value|value|.....|
//  +-----+-----+-----+-----+-----+-----+
message Metric {
    string namespace = 1;
    string name = 2;
    int64 timestamp = 3;
    repeated KeyValue tags = 4;
    // xxhash.Sum64String(tags), broker side generate before write wal
    uint64 tags_hash = 5;
    repeated SimpleField simple_fields = 6;
    CompoundField compound_field = 7;
}
enum SimpleFieldType {
    SIMPLE_UNSPECIFIED = 0;
    GAUGE = 1;
    DELTA_SUM = 2;
    CUMULATIVE_SUM = 3;
}

enum CompoundFieldType {
    COMPOUND_UNSPECIFIED = 0;
    DELTA_HISTOGRAM = 1;
    CUMULATIVE_HISTOGRAM = 2;
}

message SimpleField {
    string name = 1;
    SimpleFieldType type = 2;
    repeated Exemplar exemplars = 3;
    double value = 4;
}

// CompoundData is compound data used for histogram field.
message CompoundField {
    CompoundFieldType type = 1;
    repeated Exemplar exemplars = 2;
    double min = 3;
    double max = 4;
    double sum = 5;
    double count = 6;
    repeated double values = 7;
}

// KeyValue is a key-value pair that is used to store tag/label attributes
message KeyValue {
    string key = 1;
    string value = 2;
}

// A representation of an exemplar, which is a sample input compound-field.
// Exemplars in LindDB wont' hold any information about the environment
// it is used to record span and trace ID for a specify series.
message Exemplar {
    // Span ID of the exemplar trace.
    bytes span_id = 1;

    // Trace ID of the exemplar trace.
    bytes trace_id = 2;

    // Duration of the exemplar span.
    int64 duration = 3;
}